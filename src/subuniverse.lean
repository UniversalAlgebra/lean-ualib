import basic
import data.set

namespace subuniverse
  section
    open set
    parameters {α : Type*} {S : signature} (A : algebra_on S α) {I : Type} {R : I → set α} 
    definition F := S.F
    definition ρ := S.ρ 

    definition Sub (β : set α) : Prop :=
    ∀ (f : F) (a : ρ f → α), (∀ x, a x ∈ β) → A f a ∈ β

    -- N.B. A f a ∈ β   is notation for   β (A f a)

    definition Sg (X : set α) : set α := 
    ⋂₀ {U | Sub U ∧ X ⊆ U}

    theorem Inter.intro {s : I → set α} : 
    ∀ x, (∀ i, x ∈ s i) → (x ∈ ⋂ i, s i) :=
    assume x h t ⟨a, (eq : t = s a)⟩, eq.symm ▸ h a

    theorem Inter.elim {x : α} (C : I → set α) : 
    (x ∈ ⋂ i, C i) →  (∀ i, x ∈ C i) := 
    assume h : x ∈ ⋂ i, C i, by simp at h; apply h

    -- Intersection of subuniverses is a subuniverse
    lemma sub_of_sub_inter_sub (C : I → set α) : 
    (∀ i, Sub (C i)) → Sub ⋂i, C i :=
    assume h : ∀ i, Sub (C i), show  Sub (⋂i, C i), from 
    assume (f : F) (a : ρ f → α) (h₁ : ∀ x, a x ∈ ⋂i, C i), 
    show A f a ∈ ⋂i, C i, from 
      Inter.intro (A f a) 
      (λ j, (h j) f a (λ x, Inter.elim C (h₁ x) j))

    -- X is a subset of Sg(X)
    lemma subset_X_of_SgX (X : set α) : X ⊆ Sg X := 
    assume x (h : x ∈ X), 
      show x ∈ ⋂₀ {U | Sub U ∧ X ⊆ U}, from 
        assume W (h₁ : W ∈ {U | Sub U ∧ X ⊆ U}),  
        show x ∈ W, from 
          have h₂ : Sub W ∧ X ⊆ W, from h₁, 
        h₂.right h

    -- A subuniverse that contains X also contains Sg X
    lemma sInter_mem {X : set α} (x : α) : 
    x ∈ Sg X  →  ∀ {R : set α }, Sub R → X ⊆ R → x ∈ R := 
    assume (h₁ : x ∈ Sg X) (R : set α)  (h₂ : Sub R) (h₃ : X ⊆ R), 
    show x ∈ R, from h₁ R (and.intro h₂ h₃)

    -- Sg X is a Sub
    lemma SgX_is_Sub (X : set α) : Sub (Sg X) := 
    assume (f : F) (a : ρ f → α) (h₀ : ∀ i, a i ∈ Sg X), 
    show A f a ∈ Sg X, from 
      assume W (h : Sub W ∧ X ⊆ W), show A f a ∈ W, from 
        have h₁ : Sg X ⊆ W, from 
          assume r (h₂ : r ∈ Sg X), show r ∈ W, from 
            sInter_mem r h₂ h.left h.right,
        have h' : ∀ i, a i ∈ W, from assume i, h₁ (h₀ i),
        (h.left f a h')

    inductive Y (X : set α) : set α
    | var (x : α) : x ∈ X → Y x
    | app (f : F) (a : ρ f → α) : (∀ i, Y (a i)) → Y (A f a)

    -- Y X is a subuniverse
    lemma Y_is_Sub (X : set α) : Sub (Y X) := 
    assume f a (h: ∀ i, Y X (a i)), show Y X (A f a), from 
    Y.app f a h 

    -- Y X is the subuniverse generated by X
    theorem sg_inductive (X : set α) : Sg X = Y X :=
      have h₀ : X ⊆ Y X, from 
        assume x (h : x ∈ X), 
        show x  ∈ Y X, from Y.var x h,
      have h₁ : Sub (Y X), from 
        assume f a (h : ∀ x, Y X (a x)), 
        show Y X (A f a), from Y.app f a h,
      have inc_l : Sg X ⊆ Y X, from 
        assume u (h : u ∈ Sg X), 
        show u ∈ Y X, from (sInter_mem u) h h₁ h₀,
      have inc_r : Y X ⊆ Sg X, from
        assume a (h: a ∈ Y X), show a ∈ Sg X, from
          have h' : a ∈ Y X → a ∈ Sg X, from 
            Y.rec
            --base: a = x ∈ X
            ( assume x (h1 : x ∈ X), 
              show x ∈ Sg X, from subset_X_of_SgX X h1 )
            --inductive: a = A f b for some b with ∀ i, b i ∈ Sg X
            ( assume f b (h2 : ∀ i, b i ∈ Y X) (h3 : ∀ i, b i ∈ Sg X),
              show A f b ∈ Sg X, from SgX_is_Sub X f b h3 ),
          h' h,
      subset.antisymm inc_l inc_r

--    definition index_of_sub_above_X (X : set α) (C : I → set α) : 
--    I → Prop := λ i, Sub (C i) ∧ X ⊆ (C i) 


    -- lemma sInter_mem_of_mem {X : set α} (x : α) : 
    -- x ∈ Sg X  ↔  ∀ {R : set α }, Sub R → X ⊆ R → x ∈ R := 
    -- iff.intro
    --   (assume (h : x ∈ Sg X) (R : set α)  (h₁ : Sub R) (h₂ : X ⊆ R), 
    --     show x ∈ R, from h R (and.intro h₁ h₂))
    --   (assume (h : ∀ {R : set α}, Sub R → X ⊆ R → x ∈ R), 
    --     show x ∈ Sg X, from h (SgX_is_Sub X) (subset_X_of_SgX X))

    -- Y is the smallest Sub containing X
    -- lemma Y_is_min_Sub (U : set α) : Sub U → X ⊆ U → Y ⊆ U :=
    -- assume (h₁ : Sub U) (h₂ : X ⊆ U),
    -- assume (y : α)  (p : Y y), show U y, from 
    --   have q : Y y → Y y → U y, from 
    --     Y.rec
    --     --base: y = x ∈ X
    --     ( assume y (h : X y) (h' : Y y), h₂ h )
    --     --inductive: y = A f a for some a with ∀ i, a i ∈ Y
    --     ( assume f a (h : ∀ i, Y (a i)) (h' : ∀ i, Y (a i) → U (a i)) (h'' : Y (A f a)),
    --       have h₄ : ∀ i, a i ∈ U, from 
    --         assume i, h' i (h i), show U (A f a), from h₁ f a h₄ ),
    --   q p p


  end


end subuniverse

-- Miscellaneous Notes

-- ⋂₀ is notation for sInter (S : set (set α)) : set α := Inf S,
-- and Inf S is defined as follows:
-- Inf          := λs, {a | ∀ t ∈ s, a ∈ t },
-- So, if S : set (set α) (i.e., a collection of sets of type α),
-- then Inf S is the intersection of the sets in S.
